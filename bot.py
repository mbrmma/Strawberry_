import asyncio
import logging
import math
from dataclasses import dataclass, field
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import html

import config

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("strawberry_bot")

bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- Order model ---
@dataclass
class Order:
    user_id: int
    username: Optional[str]
    size_kg: float = 0.0
    qty: int = 0
    delivery_type: Optional[str] = None  # 'delivery' or 'pickup'
    address: Optional[str] = None
    phone: Optional[str] = None
    name: Optional[str] = None
    time_slot: Optional[str] = None
    comment: Optional[str] = None

    def total_kg(self) -> float:
        return round(self.size_kg * self.qty, 2)

    def items_sum(self) -> float:
        price = config.PRICES.get(self.size_kg, 0.0)
        if config.PRICE_MODE == "per_kg":
            return round(price * self.size_kg * self.qty, 2)
        return round(price * self.qty, 2)

    def delivery_fee(self) -> float:
        return 0.0 if self.items_sum() >= config.FREE_DELIVERY_FROM or self.delivery_type == "pickup" else config.DELIVERY_FEE

    def total_sum(self) -> float:
        return round(self.items_sum() + self.delivery_fee(), 2)

    def as_text(self) -> str:
        lines = [
            f"üçì <b>–ó–∞–∫–∞–∑ –∫–ª—É–±–Ω–∏–∫–∏</b> ({html.quote(config.CITY)})",
            f"–†–∞–∑–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏: <b>{self.size_kg} –∫–≥</b> √ó <b>{self.qty}</b> —à—Ç",
            f"–ò—Ç–æ–≥–æ –≤–µ—Å: <b>{self.total_kg()} –∫–≥</b>",
            f"–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: <b>{self.items_sum():.2f}</b>",
        ]
        if self.delivery_type == "delivery":
            lines.append("–°–ø–æ—Å–æ–±: <b>–î–æ—Å—Ç–∞–≤–∫–∞</b>")
            lines.append(f"–ê–¥—Ä–µ—Å: {html.quote(self.address or '-')}")
            lines.append(f"–û–∫–Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(self.time_slot or '-')}")
            fee = self.delivery_fee()
            if fee > 0:
                lines.append(f"–î–æ—Å—Ç–∞–≤–∫–∞: <b>{fee:.2f}</b> (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç {config.FREE_DELIVERY_FROM})")
            else:
                lines.append("–î–æ—Å—Ç–∞–≤–∫–∞: <b>–ë–ï–°–ü–õ–ê–¢–ù–û</b>")
        else:
            lines.append("–°–ø–æ—Å–æ–±: <b>–°–∞–º–æ–≤—ã–≤–æ–∑</b>")
            lines.append(f"{html.quote(config.PICKUP_ADDRESS)}")
        lines += [
            f"–ò–º—è: {html.quote(self.name or '-')}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(self.phone or '-')}",
        ]
        if self.comment:
            lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.quote(self.comment)}")
        lines.append(f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>{self.total_sum():.2f}</b>")
        return "\n".join(lines)

# --- Simple in-memory storage ---
user_orders: Dict[int, Order] = {}
last_order_ts: Dict[int, float] = {}

# --- FSM ---
class Form(StatesGroup):
    choosing_size = State()
    choosing_qty = State()
    choosing_delivery = State()
    entering_address = State()
    choosing_time = State()
    entering_name = State()
    entering_phone = State()
    entering_comment = State()
    confirming = State()

# --- Keyboards ---
def sizes_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for size in sorted(config.PRICES.keys()):
        kb.button(text=f"{size} –∫–≥ ‚Äî {config.PRICES[size]:.2f}", callback_data=f"size:{size}")
    kb.adjust(1)
    return kb

def qty_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for q in [1,2,3,4,5,6]:
        kb.button(text=f"{q} —à—Ç", callback_data=f"qty:{q}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:size")
    kb.adjust(3)
    return kb

def delivery_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery:delivery")
    kb.button(text="üè¨ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery:pickup")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:qty")
    kb.adjust(2,1)
    return kb

def time_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for slot in config.TIME_SLOTS:
        kb.button(text=slot, callback_data=f"time:{slot}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:address")
    kb.adjust(2)
    return kb

def confirm_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:yes")
    kb.button(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment:add")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:phone")
    kb.adjust(1,1,1)
    return kb

# --- Handlers ---
@router.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    text = (
        "üçì <b>–ö–ª—É–±–Ω–∏–∫–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π</b> –ø–æ –≥–æ—Ä–æ–¥—É "
        f"{html.quote(config.CITY)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É:"
    )
    await m.answer(text, reply_markup=sizes_kb().as_markup())
    await state.set_state(Form.choosing_size)

@router.message(Command("menu"))
async def menu(m: Message, state: FSMContext):
    await start(m, state)

@router.callback_query(F.data.startswith("size:"))
async def choose_size(c: CallbackQuery, state: FSMContext):
    size = float(c.data.split(":")[1])
    order = user_orders.get(c.from_user.id) or Order(user_id=c.from_user.id, username=c.from_user.username)
    order.size_kg = size
    user_orders[c.from_user.id] = order
    await c.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–∞—Å–æ–≤–∫–∞: <b>{size} –∫–≥</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫:",
        reply_markup=qty_kb().as_markup()
    )
    await state.set_state(Form.choosing_qty)
    await c.answer()

@router.callback_query(F.data.startswith("qty:"))
async def choose_qty(c: CallbackQuery, state: FSMContext):
    qty = int(c.data.split(":")[1])
    order = user_orders.get(c.from_user.id)
    if not order:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É", show_alert=True)
        return
    order.qty = qty
    # check min kg
    if order.total_kg() < config.MIN_ORDER_KG:
        await c.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {config.MIN_ORDER_KG} –∫–≥", show_alert=True)
    await c.message.edit_text(
        f"–ö–æ—Ä–æ–±–æ–∫: <b>{qty}</b> (–≤–µ—Å {order.total_kg()} –∫–≥)\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=delivery_kb().as_markup()
    )
    await state.set_state(Form.choosing_delivery)
    await c.answer()

@router.callback_query(F.data.startswith("delivery:"))
async def choose_delivery(c: CallbackQuery, state: FSMContext):
    d = c.data.split(":")[1]
    order = user_orders.get(c.from_user.id)
    if not order:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", show_alert=True)
        return
    order.delivery_type = d
    if d == "delivery":
        await c.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b> (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥/—ç—Ç–∞–∂):")
        await state.set_state(Form.entering_address)
    else:
        await c.message.edit_text(
            f"–°–∞–º–æ–≤—ã–≤–æ–∑ –≤—ã–±—Ä–∞–Ω. {html.quote(config.PICKUP_ADDRESS)}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:")
        await state.set_state(Form.entering_name)
    await c.answer()

@router.message(Form.entering_address, F.text.len() > 5)
async def get_address(m: Message, state: FSMContext):
    order = user_orders.get(m.from_user.id)
    order.address = m.text.strip()
    # choose time
    kb = time_kb().as_markup()
    await m.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ <b>–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>:", reply_markup=kb)
    await state.set_state(Form.choosing_time)

@router.message(Form.entering_address)
async def address_too_short(m: Message):
    await m.answer("–ü–æ—Ö–æ–∂–µ, –∞–¥—Ä–µ—Å –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º.")

@router.callback_query(Form.choosing_time, F.data.startswith("time:"))
async def choose_time(c: CallbackQuery, state: FSMContext):
    order = user_orders.get(c.from_user.id)
    order.time_slot = c.data.split(":", 1)[1]
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:")
    await state.set_state(Form.entering_name)
    await c.answer()

@router.message(Form.entering_name, F.text.len() >= 2)
async def get_name(m: Message, state: FSMContext):
    order = user_orders.get(m.from_user.id)
    order.name = m.text.strip()
    await m.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:")
    await state.set_state(Form.entering_phone)

@router.message(Form.entering_name)
async def name_too_short(m: Message):
    await m.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

@router.message(Form.entering_phone, F.text.regexp(r"^[+\d][\d\s\-()]{7,}$"))
async def get_phone(m: Message, state: FSMContext):
    order = user_orders.get(m.from_user.id)
    order.phone = m.text.strip()
    text = order.as_text() + "\n\n" + html.quote(config.PAYMENT_TEXT)
    await m.answer(text, reply_markup=confirm_kb().as_markup())
    await state.set_state(Form.confirming)

@router.message(Form.entering_phone)
async def phone_invalid(m: Message):
    await m.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –∫–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +34 ...).")

@router.callback_query(Form.confirming, F.data == "comment:add")
async def add_comment(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–ø–æ–¥—ä–µ–∑–¥, –¥–æ–º–æ—Ñ–æ–Ω, –ø–æ–∂–µ–ª–∞–Ω–∏—è):")
    await state.set_state(Form.entering_comment)
    await c.answer()

@router.message(Form.entering_comment, F.text.len() > 0)
async def save_comment(m: Message, state: FSMContext):
    order = user_orders.get(m.from_user.id)
    order.comment = m.text.strip()
    await m.answer(order.as_text() + "\n\n" + html.quote(config.PAYMENT_TEXT), reply_markup=confirm_kb().as_markup())
    await state.set_state(Form.confirming)

@router.callback_query(Form.confirming, F.data == "confirm:yes")
async def confirm_order(c: CallbackQuery, state: FSMContext):
    import time
    now = time.time()
    last = last_order_ts.get(c.from_user.id, 0)
    if now - last < config.ORDER_COOLDOWN_SEC:
        await c.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return
    last_order_ts[c.from_user.id] = now

    order = user_orders.get(c.from_user.id)
    if not order:
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start", show_alert=True)
        return

    # Notify admin
    admin_text = order.as_text() + f"\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{c.from_user.username or '‚Äî'} (ID {c.from_user.id})"
    try:
        if config.ADMIN_CHAT_ID:
            await bot.send_message(chat_id=config.ADMIN_CHAT_ID, text="üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n" + admin_text)
    except Exception as e:
        log.exception("Failed to notify admin: %s", e)

    await c.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()
    await c.answer()

@router.message(Command("id"))
async def my_id(m: Message):
    await m.answer(f"–í–∞—à chat_id: <code>{m.chat.id}</code>")

async def main():
    if config.BOT_TOKEN == "PUT_YOUR_BOT_TOKEN_HERE":
        log.warning("Please set BOT_TOKEN environment variable or config.BOT_TOKEN.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
